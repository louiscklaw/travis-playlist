{"version":3,"sources":["webpack:///./src/endpoints/jsons.js","webpack:///./src/components/build_failed_card.js","webpack:///./src/components/list_of_failed_branches_live_heading.js","webpack:///./src/pages/list_failed_branch_live.js"],"names":["TRAVIS_USER_REPO","getBranchFailStatistics","fetch","getFailedBuildJson","fetchWithToken","url_in","travis_token","headers","getRepoNameFromBuildsLink","builds_link","splitted","split","error","console","getUserRepoWithToken","travis_token_in","fetchWithTokenReturnJson","url","then","r","json","getUserAllRepoWithToken","fetch_one_page_only","a","all_repos","keep_going","fetch_url","fetch_result","pagination","alert","next","next_href","repositories","log","getTravisApiEndpointBranches","repo_in","repo_name","replace","travisRepoNameToLink","getFailedBranchByRepo","r_json","last_builds","branches","map","branch","last_build","last_builds_with_fail","filter","state","filtered_branches","x","repo_path","build_id","BuildFailedCard","props","content","className","href","target","class","link_to_travis","style","color","padding","link_in","extractBuildNoFromLink","ListOfFailedBranchLiveHeading","num_fails","num_repos","chunkArray","myArray","chunk_size","index","arrayLength","length","tempArray","myChunk","slice","push","ShowRepoCards","show_repo_name","last_builds_failed","chunk","ListUserRepoPage","React","useContext","GlobalContext","useState","setContent","setShowRepoName","setLastBuildsFailed","repo_filter","setRepoFilter","test_debug","refresh_interval","raw_repo_list","setRawRepoList","LoadRepoFromTravis","Promise","all","values","useEffect","repo_list","slug","repo","fetchRepoLastBuildStatus","repos_results","repo_result","failed_list","output","forEach","failed_by_repo_name","reassemble_failed_list","Object","keys","repo_to_show","search","setInterval","title","type","placeholder","onChange","e","filter_text","value","trim","handleFilterOnChange","JSON","stringify"],"mappings":"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","file":"component---src-pages-list-failed-branch-live-js-9cbc1c5fd14dcaada501.js","sourcesContent":["\nconst FAILED_JSON_URL='/json/build_failed_list.json'\n\nconst BUILD_FAILED_LIST_JSON_URL='https://raw.githubusercontent.com/louiscklaw/travis-playlist/db/build_failed_list.json'\nconst BRANCH_FAIL_STATISTICS_URL='https://raw.githubusercontent.com/louiscklaw/travis-playlist/db/branch_fail_statistics.json'\n\nconst TRAVIS_USER_REPO =`https://api.travis-ci.com/owner/louiscklaw/repos`\n\n\nfunction getBranchFailStatistics(){\n  return fetch(BRANCH_FAIL_STATISTICS_URL)\n}\n\nfunction getFailedBuildJson(){\n  return fetch(BUILD_FAILED_LIST_JSON_URL)\n}\n\nfunction fetchWithToken(url_in, travis_token){\n  return fetch( url_in, {\n    headers: {\n      'Travis-API-Version': 3,\n      'Authorization': travis_token,\n      'Content-Type': 'application/xml'\n    }\n  } )\n}\n\nfunction getRepoNameFromBuildsLink(builds_link){\n  try {\n    var splitted = builds_link.split('/')\n\n  } catch (error) {\n    console.error('findme',builds_link)\n    throw error\n  }\n  return splitted[4]+'/'+splitted[5]\n}\n\n\nfunction getLiveFailedBuildJson(travis_token_in){\n  return fetchWithToken('123', travis_token_in)\n}\n\nfunction getUserRepoWithToken(travis_token_in){\n  return fetchWithToken(TRAVIS_USER_REPO, travis_token_in)\n}\n\nfunction fetchWithTokenReturnJson(url, travis_token_in){\n  return fetchWithToken(url, travis_token_in)\n            .then(r => r.json())\n}\n\nasync function getUserAllRepoWithToken(travis_token_in, fetch_one_page_only){\n  let all_repos = []\n\n  // let fetch_result = await fetchWithToken(TRAVIS_USER_REPO, travis_token_in)\n\n  var keep_going = true\n  var countdown = 100\n  // console.log('fetch_one_page_only',fetch_one_page_only)\n\n  let fetch_url = TRAVIS_USER_REPO\n\n  while ( keep_going ) {\n    // console.log(`fetching ${fetch_url}`)\n    var fetch_result = await fetchWithTokenReturnJson(fetch_url,travis_token_in)\n    var pagination = fetch_result[ '@pagination' ]\n\n    if ( typeof fetch_result['@type'] != 'undefined'){\n      if (fetch_result['@type'] == 'error'){\n        alert('error found on fetching result')\n        alert(travis_token_in)\n        keep_going=false\n      }\n    }\n\n    if (typeof pagination == 'undefined'){\n      keep_going = false\n    }else{\n      keep_going = pagination.next\n      let next_href = pagination.next ? pagination.next[ '@href' ] : null\n      // console.log(next_href)\n      fetch_url = `https://api.travis-ci.com${next_href}`\n\n      all_repos = [\n        ...all_repos,\n        ...fetch_result.repositories\n      ]\n    }\n\n    if (fetch_one_page_only == true) {\n      console.log('fetch_one_page_only is on')\n      break\n    }\n  }\n\n\n\n  return all_repos\n}\n\nfunction travisRepoNameToLink( repo_name ) {\n  try {\n    return repo_name.replace( '/', '%2F' )\n\n  } catch ( error ) {\n    console.log( repo_name )\n    throw error\n  }\n}\n\nfunction filterLogic(json_in){\n  var json_result = json_in\n  var branches  = json_result.branches\n  var last_builds = branches.map(branch => branch.last_build)\n\n  var last_builds_with_fail = last_builds.filter( last_build => last_build.state =='failed')\n  var last_builds_with_cancelled = last_builds.filter( last_build => last_build.state !='passed')\n\n  console.log('findme last_build',last_builds)\n\n  return last_builds_with_fail\n}\n\nfunction translateToBuildsLink(repo_path,build_id){\n  // TODO: handle the '/' to put it inside return\n\n  var builds_id = build_id.replace('build','builds')\n  return `https://travis-ci.com/github/${repo_path}${builds_id}`\n}\n\nfunction getTravisApiEndpointBranches(repo_in){\n  return `https://api.travis-ci.com/repo/github/${travisRepoNameToLink(repo_in)}/branches`\n}\n\nfunction getFailedBranchByRepo(repo_in, travis_token_in){\n  let url = getTravisApiEndpointBranches(repo_in)\n\n  return fetchWithTokenReturnJson(url, travis_token_in)\n    .then(r_json => {\n      return filterLogic(r_json)\n    })\n    .then( filtered_branches => filtered_branches.map(x => translateToBuildsLink(repo_in,x['@href'])))\n}\n\n\nexport {\n  getFailedBuildJson,\n  getBranchFailStatistics,\n\n  getLiveFailedBuildJson,\n  getUserRepoWithToken,\n  getUserAllRepoWithToken,\n  getFailedBranchByRepo,\n  getRepoNameFromBuildsLink\n}","import React from 'react'\nimport {Link} from 'gatsby'\n\nfunction extractBuildNoFromLink(link_in){\n  try {\n    return link_in.split('/')[7]\n  } catch (error) {\n    console.log('at build_failed_card.js', link_in)\n    throw error\n  }\n}\n\nfunction BuildFailedCard(props){\n  let {repo_name, content} = props\n  return(\n    <>\n      <div className=\"card\">\n        <header className=\"card-header\">\n          <p className=\"card-header-title\">\n            <a href={'http://www.github.com/'+repo_name} className=\"button is-white is-small\" target='_blank'>\n            <i class=\"fab fa-github-square fa-2x\"></i>\n              {repo_name.split('/')[1]}\n            </a>\n          </p>\n        </header>\n        <div className=\"card-content\">\n          <div className=\"content\">\n            <div className=\"tags\">\n            {\n              content.map( link_to_travis => {\n                return(\n                  <span class=\"tag is-danger\">\n                    <a href={link_to_travis}\n                      style={{color: \"white\", padding: \"3px;\"}}\n                      target=\"_blank\">\n                      <i class=\"fas fa-times\"></i>\n                      {extractBuildNoFromLink(link_to_travis)}\n                    </a>\n                  </span>\n                )\n              })\n            }\n            </div>\n          </div>\n        </div>\n        <footer className=\"card-footer\">\n        </footer>\n      </div>\n    </>\n  )\n}\n\nexport default BuildFailedCard","import React from 'react'\n\nfunction ListOfFailedBranchLiveHeading(props){\n  let {num_fails, num_repos}= props\n  return(\n    <>\n      <h1 className=\"title is-3\">\n        list of failed branches(live)\n      </h1>\n      <h2 className=\"subtitle is-6\">\n        (number of repos: {num_repos}, number of fails {num_fails})\n      </h2>\n    </>\n  )\n}\n\nexport default ListOfFailedBranchLiveHeading","import React from 'react'\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport Navbar from '../components/navbar'\n\nimport GlobalContext from '../contexts/global'\nimport {getUserAllRepoWithToken} from '../endpoints/jsons'\nimport { getFailedBranchByRepo } from '../endpoints/jsons'\nimport { getRepoNameFromBuildsLink } from '../endpoints/jsons'\nimport BuildFailedCard from '../components/build_failed_card'\n\nimport ListOfFailedBranchLiveHeading from '../components/list_of_failed_branches_live_heading'\n\nfunction fetchRepoLastBuildStatus(repo_list, travis_token_in){\n  console.log('into fetchRepoLastBuildStatus')\n  return Promise.all(repo_list.map(repo => getFailedBranchByRepo(repo, travis_token_in)))\n}\n\nfunction chunkArray(myArray, chunk_size){\n  var index = 0;\n  var arrayLength = myArray.length;\n  var tempArray = [];\n\n  for (index = 0; index < arrayLength; index += chunk_size) {\n      let myChunk = myArray.slice(index, index+chunk_size);\n      // Do something if you want with the group\n      tempArray.push(myChunk);\n  }\n\n  return tempArray;\n}\n\nfunction ShowRepoCards(props){\n  let {show_repo_name, last_builds_failed} = props\n  return (\n    <>\n      {\n        show_repo_name.map(chunk => {\n          return(\n            <div className=\"columns is-desktop\">\n              {\n                chunk.map(repo_name => {\n                  return(\n                    <div className=\"column\">\n                      <BuildFailedCard repo_name={repo_name} content={last_builds_failed[repo_name]} />\n                    </div>\n                  )\n                })\n              }\n            </div>\n          )\n        })\n      }\n    </>\n  )\n}\n\nfunction ListUserRepoPage(props){\n  const minutes = 1000*60\n\n  let {travis_token} = React.useContext(GlobalContext)\n  let [content , setContent] = React.useState()\n  let [chunked_repo_name, setChunkedRepoName] = React.useState([])\n  let [show_repo_name, setShowRepoName] = React.useState([])\n  let [last_builds_failed, setLastBuildsFailed] = React.useState({})\n\n  let [repo_filter, setRepoFilter] = React.useState('')\n\n  let [test_debug, setTestDebug] = React.useState()\n\n  let [refresh_interval, setRefreshInterval] = React.useState(3 * minutes)\n\n  let [raw_repo_list, setRawRepoList] = React.useState({})\n\n  function handleFilterOnChange(e){\n    let filter_text = e.target.value.trim()\n    setRepoFilter(filter_text)\n  }\n\n  function LoadRepoFromTravis(){\n    console.log('load repo from travis')\n    Promise.all([\n      getUserAllRepoWithToken(travis_token)\n    ])\n    .then(values => {\n      setRawRepoList(values[0])\n      console.log('raw repo list updated')\n    })\n  }\n\n  function reassemble_failed_list(failed_list){\n    let output={}\n    try {\n      failed_list.forEach(failed_by_repo_name => {\n        var repo_name = getRepoNameFromBuildsLink(failed_by_repo_name[0])\n        var failed_list = failed_by_repo_name\n        // last_builds_failed[repo_name]=failed_list\n        output[repo_name]=failed_list\n      })\n    } catch (error) {\n      console.log('failed_list', failed_list)\n    }\n\n    return output\n  }\n\n  React.useEffect(()=>{\n    var last_builds_failed={}\n\n    if (typeof travis_token != 'undefined'){\n      setContent('loading')\n\n      if (raw_repo_list.length > 0){\n        console.log('into raw_repo_list')\n        console.log('raw_repo_list',raw_repo_list)\n\n        var repo_list = raw_repo_list.map(x => x.slug)\n        console.log('repo_list',repo_list)\n\n        fetchRepoLastBuildStatus(repo_list, travis_token)\n          .then( repos_results => {\n            console.log('repos_results',repos_results)\n            return repos_results.filter(repo_result => repo_result.length > 0)\n          } )\n          .then( failed_list => {\n            console.log('failed_list', failed_list)\n\n            let output=reassemble_failed_list(failed_list)\n            setLastBuildsFailed(output)\n            setShowRepoName(chunkArray(Object.keys(output), 6))\n\n          })\n\n\n      }\n\n    }\n  },[travis_token, raw_repo_list])\n\n  React.useEffect(()=>{\n    // debug:\n    // setTestDebug(Object.keys(last_builds_failed).filter( x => x.search(repo_filter) > -1))\n\n    let repo_to_show = Object.keys(last_builds_failed).filter( x => x.search(repo_filter) > -1)\n\n    setShowRepoName(chunkArray(repo_to_show, 6))\n\n  },[repo_filter, last_builds_failed])\n\n  React.useEffect(()=>{\n    LoadRepoFromTravis()\n\n    setInterval(() => {\n      console.log('refresh happening')\n      LoadRepoFromTravis()\n    }, refresh_interval);\n  },[])\n\n  return(\n    <>\n      <Layout>\n      <SEO title=\"travis dashboard\" />\n        <Navbar />\n        <section className=\"section\">\n          <div className=\"container\">\n            <ListOfFailedBranchLiveHeading  />\n            <input type=\"text\" placeholder=\"repo filter\" onChange={e=>handleFilterOnChange(e)} value={repo_filter} />\n          </div>\n        </section>\n        {JSON.stringify(test_debug)}\n        <ShowRepoCards show_repo_name={show_repo_name} last_builds_failed={last_builds_failed} />\n\n      </Layout>\n    </>\n  )\n}\n\nexport default ListUserRepoPage"],"sourceRoot":""}